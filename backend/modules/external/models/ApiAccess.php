<?php

namespace backend\modules\external\models;

use Yii;
use yii\data\ActiveDataProvider;

/**
 * This is the model class for table "api_access".
 *
 * @property int $id
 * @property int $project_id 项目ID
 * @property string $api_tag api标记
 * @property int $is_enabled 是否启用
 * @property string $expired_at 过期时间
 * @property string $created_at 创建时间
 * @property string $updated_at 修改时间
 */
class ApiAccess extends \yii\db\ActiveRecord
{
    public static $modelName = '接口权限';


    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'api_access';
    }

    public function beforeSave($insert)
    {
        if ($this->expired_at) {
            $this->expired_at = date('Y-m-d H:i:s', strtotime($this->expired_at));
        }
        if ($insert) {
            $this->created_at = date('Y-m-d H:i:s');
        }
        $this->updated_at = date('Y-m-d H:i:s');
        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['project_id', 'api_tag', 'is_enabled', 'expired_at'], 'required'],
            [['project_id', 'is_enabled'], 'integer'],
            [['project_id', 'api_tag', 'expired_at', 'created_at', 'updated_at'], 'safe'],
            [['api_tag'], 'string', 'max' => 16],
            [['project_id', 'api_tag'], 'checkUnique'],
        ];
    }

    public function checkUnique($attribute, $params) {
        $query = ApiAccess::find()->where(['project_id'=>$this->project_id, 'api_tag'=>$this->api_tag]);
        if (!$this->isNewRecord) {
            $query->andWhere(['<>', 'id', $this->id]);
        }
        $exist = $query->one();
        if ($exist) {
            $this->addError('api_tag', '接口重复');
        }
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'project_id' => '项目ID',
            'api_tag' => 'API标记',
            'is_enabled' => '是否启用',
            'expired_at' => '过期时间',
            'created_at' => '创建时间',
            'updated_at' => '修改时间',
        ];
    }

    /**
     * Creates data provider instance with search query applied
     *
     * @param array $params
     *
     * @return ActiveDataProvider
     */
    public function search($params)
    {
        $query = self::find();

        $dataProvider = new ActiveDataProvider([
            'query' => $query,
            'sort'=>['defaultOrder'=>['id'=> SORT_DESC]],
            'pagination'=>['validatePage'=>false],
        ]);

        $this->load($params);

        $query->andFilterWhere([
            'project_id' => $this->project_id,
            'api_tag' => $this->api_tag,
            'is_enabled' => $this->is_enabled,
        ]);

        return $dataProvider;
    }

    public function getProject() {
        return $this->hasOne(Project::className(), ['id' => 'project_id']);
    }
}
